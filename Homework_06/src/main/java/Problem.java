//1. Введите в наш цветочный киоск интерфейсы для работы продавца (может только формировать букеты и продавать их),
// интерфейс владельца(устанавливает цену на цветок) и интерфейс поставщика (доставляет определенное количество цветов
// определенного вида по определенной стоимости). Реализуйте класс FlowerShop, который имплементирует методы всех
// интерфейсов. В основном классе Main съимитируйте поставку товара, его оценку, рэндомную генерацию букетов и их
// распродажу до конца. Подсчитайте сумму прибыли (выторг - себестоимость)

import Owner.IOwner;
import Provider.IProvider;
import Simulators.SimulationVendor;
import Simulators.SimulatorOwner;
import Simulators.SimulatorProvider;
import Vendor.IVendor;

public class Problem implements Interfaces.IProblem {
    public void solve(){
        //КАК РЕШЕНА ЗАДАЧА
        //1. Хранилище цветов в магазине организовано в виде связного списка стэков
        //2. Каждый стэк предназначается для отдельной товарной позиции (цветы определенного вида и цвета)
        //3. Если стэк освобождается - он автоматически убирается из связного списка
        //4. Продавец может набирать из хранилища цветов букет, а потом "продавать" его, таким образом обнуляя букет
        //5. Иммитация работы построена в три этапа:
        //I этап - поставщик поставляет пять партий цветов (тип и цвет моделируются как равномерно распределенная случайная величина)
        //II этап - приходит владелец магазина и устанавливает свою наценку для каждого типа цветов (по сути - для каждого стэка)
        //III этап - приходит покупатель и "спрашивает" продавца о каком-то конкретном букете.
        //          Покупатель запрашивает случайное количество (1, 3 или 5), случайный тип и случайный цвет.
        //          Если такой букет собрать невозможно, он "просит" другой букет, и так - до тех пор пока не получит нужный ему букет.
        // Покупатели продолжают приходить до полной распродажи всех цветов.


        //Let's create flower shop and plug-in interfaces
        IOwner owner;
        IProvider provider;
        IVendor vendor;
        {
            FlowerShop flowerShop = new FlowerShop();   //Указатель на FlowerShop будет утерян после выхода из блока {}, но останется доступ через интерефейсы
            owner = flowerShop;
            provider = flowerShop;
            vendor = flowerShop;
        }

        //Моделируем поставку пяти партий цветов
        System.out.println("\n\n------------------------------------------------------------------------------------");
        System.out.println("----------------------Provider delivers flowers-------------------------------------");
        System.out.println("------------------------------------------------------------------------------------");
        SimulatorProvider sProvider = new SimulatorProvider();
        for(int i =0; i<5; i++){
            System.out.println("----------------------Getting consignment #" + (i+1) + "----------------------------------------");
            sProvider.generate(provider);
            owner.showAll();
        }

        //Задаем цену на цветы
        System.out.println("\n\n------------------------------------------------------------------------------------");
        System.out.println("----------------------Owner is setting the price------------------------------------");
        System.out.println("------------------------------------------------------------------------------------");
        SimulatorOwner sOwner = new SimulatorOwner();
        sOwner.generatePrice(owner);
        owner.showAll();

        //Моделируем распродажу цветов
        System.out.println("\n\n------------------------------------------------------------------------------------");
        System.out.println("----------------------Vendor is saling flowers--------------------------------------");
        System.out.println("------------------------------------------------------------------------------------");
        SimulationVendor sVendor = new SimulationVendor();
        int counter = 1;
        while(vendor.isEmpty() == false){
            System.out.println("----------------------Sale bouquet #" + counter++ + "-----------------------------------------------");
            sVendor.makeBouquet(vendor);
            System.out.println(vendor.getBouquet());
            vendor.sellBouquet();
            owner.showAll();
        }
    }
}
