//1. Создайте в цветочном магазине систему обработки исключений, которая не позволит по остановится при возникновении
// исключительной ситуации. Сымитируйте возникновение этого события.
// 2. Разработайте собственное исключение, основной задачей которого будет обработка логгирования действий. Его мы можем
// выбрасывать вручную, когда нам необходимо что-то заллогировать, или в случае возникновения исключительной ситуации в
// системе, мы должны связать с ним exception источник и тоже его залогировать. В него мы можем передавать код ошибки
// при вызове. Пока реализация логгирования будет просто выводом в консоль сообщения, найденного по коду.




//КАК РЕШЕНА ЗАДАЧА
//1. Созданные классы исключений собраны в пакете ShopExceptions.
//2. Исключения в работе продавца, поставщика и продавца возникают если была задана отрицательная цена,
//   отрицательное количество, или если возник запрос на такое количество цветов, которого нет на складе.
//3. Вся иммитации появления этих исключений выполняются в методах-симуляторах (package Simulators).
//   Так как программа построена как симулятор поведения, были отдельно созданы симуляторы "неправильного" поведения, например
//   public void tryNegativeCostPrice(IProvider provider) - метод из интерфейса поставщика, в котором последний задает отрицательную цену.
//4. Касательно исключений типа NullPointerException - долго думал куда их вставить, не ломая существующую логику программы
//   Вот что придумал: переписал метод public void addFlowers в классе FlowerStack
//   Раньше там была проверка стэка на null. Если стэка не было, он создавался.
//   Теперь все осталось так же, но реализовано это с помощью механизма исключений.
//   Если стэка нет, то при попытке добавить на него цветы будет сгенерировано исключение NullPointerException
//   В обработчике исключения будет создан стэк, а потом метод public void addFlowers будет рекурсивно перезапущен.
//5. В начале симуляции видно как обработчиком исключений выводится подряд 4-5 сообщений о создании нового стэка при поставке цветов.
//6. В методе public void addToBouquet (класс FlowerStore) выполняется перепробрасывание исключения NullPointerException
//   в исключение NoFlowersExceptions. То есть сначала мы обращаемся к пустому или даже к несуществующему стэку, а потом
//   понимаем что нужных нам цветов нет на складе.
//7. Для логирования событий создан класс Logger, в который записываются все события.
//8. В учебных целях исключения продавца, поставщика и продавца выводились на экран сразу при обработке и кроме этого вносились также в журнал логов.
//9. В конце симуляции выводиться на экран весь журнал логов.
import java.io.IOException;

public class Main {
    public static void main(String[] args) throws IOException {
        int choice = 0;
        do{
            Interfaces.IConsole.cleanConsole();
            System.out.println("MENU");
            System.out.println("1 - show simulation");
            System.out.println("0 - exit");
            System.out.print("Your choice:");
            do{
                choice = Interfaces.IConsole.getInteger();
                if(choice != 0 && choice != 1){
                    System.out.println("Incorrect input. Integer from the range 0..1 is expected.");
                    System.out.print("Try again: ");
                }
            }while(choice != 0 && choice != 1);
            if(choice != 0){
                Interfaces.IProblem problem = new Problem();
                problem.solve();
                System.out.print("Press enter to continue");
                char str = (char)System.in.read();
            }
        }while(choice != 0);
        System.out.println("Buy-buy!");
    }
}
